---
name: Add Users to Repositories from JSON
on:
  workflow_dispatch: null
jobs:
  add-users:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Read Users from JSON
        id: read-json
        run: echo "USERS_JSON=$(cat .github/data/access-list.json | jq -c)" >>
          $GITHUB_ENV
      - name: Sync Users with Repositories
        uses: actions/github-script@v6
        with:
          script: >
            const owner = "JatinDTE"; // Replace with your GitHub org or username

            const users = JSON.parse(process.env.USERS_JSON).users;


            // Fetch existing collaborators for each repository

            const getCollaborators = async (repo) => {
              return await github.rest.repos.listCollaborators({
                owner: owner,
                repo: repo,
              });
            };


            // Add and remove users based on the JSON

            for (const user of users) {
              for (const repoInfo of user.repositories) {
                try {
                  // Get existing collaborators for the repo
                  const collaborators = await getCollaborators(repoInfo.repo);

                  // Check if user is already a collaborator and needs to be removed
                  const existingCollaborator = collaborators.find(collab => collab.login === user.username);
                  
                  // If the user doesn't exist in the repository, add them
                  if (!existingCollaborator) {
                    await github.rest.repos.addCollaborator({
                      owner: owner,
                      repo: repoInfo.repo,
                      username: user.username,
                      permission: repoInfo.permission,
                    });
                    console.log(`✅ Added ${user.username} to ${repoInfo.repo} with ${repoInfo.permission} access.`);
                  } else {
                    // User already exists, check if permission has changed
                    if (existingCollaborator.permission !== repoInfo.permission) {
                      await github.rest.repos.addCollaborator({
                        owner: owner,
                        repo: repoInfo.repo,
                        username: user.username,
                        permission: repoInfo.permission,
                      });
                      console.log(`✅ Updated ${user.username} permission to ${repoInfo.permission} on ${repoInfo.repo}.`);
                    }
                  }
                } catch (error) {
                  console.error(`❌ Failed to add or update ${user.username} to ${repoInfo.repo}: ${error.message}`);
                }
              }

              // Now remove users who no longer have access to any repositories
              for (const repoInfo of user.repositories) {
                if (!repoInfo.permission) {
                  try {
                    // If the user has no permission listed, remove them from the repo
                    await github.rest.repos.removeCollaborator({
                      owner: owner,
                      repo: repoInfo.repo,
                      username: user.username,
                    });
                    console.log(`✅ Removed ${user.username} from ${repoInfo.repo}.`);
                  } catch (error) {
                    console.error(`❌ Failed to remove ${user.username} from ${repoInfo.repo}: ${error.message}`);
                  }
                }
              }
            }
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}





